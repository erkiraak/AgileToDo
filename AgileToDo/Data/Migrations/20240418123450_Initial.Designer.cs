// <auto-generated />
using System;
using AgileToDo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgileToDo.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240418123450_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("AgileToDo.Models.IssueModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Resolved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolvedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IssueModel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5958260-7028-4ae0-896d-1429c1a91b11"),
                            CreatedAt = new DateTime(2024, 4, 16, 3, 11, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 29, 15, 19, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User encounters errors or issues while trying to install new software on their computer. This could be due to compatibility issues, insufficient disk space, or corrupted installation files.",
                            Resolved = false,
                            Title = "Software Installation Failure"
                        },
                        new
                        {
                            Id = new Guid("4118a13d-1d06-4f1e-9130-234e501e5136"),
                            CreatedAt = new DateTime(2024, 4, 14, 13, 53, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 14, 22, 39, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User is having trouble setting up their email account on their computer or mobile device. They may be experiencing issues with incoming or outgoing mail, authentication errors, or incorrect server settings.",
                            Resolved = false,
                            Title = "Email Configuration Problems"
                        },
                        new
                        {
                            Id = new Guid("7dbcc617-2fb3-4ee0-b36f-517b0b69ee30"),
                            CreatedAt = new DateTime(2024, 4, 18, 13, 30, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 20, 17, 7, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User's files or documents have gone missing or become corrupted. This could be due to accidental deletion, hardware failure, or malware infection.",
                            Resolved = false,
                            Title = "Data Loss or Corruption"
                        },
                        new
                        {
                            Id = new Guid("002d2620-fea1-4431-baa4-d660bc30ba22"),
                            CreatedAt = new DateTime(2024, 4, 7, 9, 34, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 13, 22, 41, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "Computer crashes and displays a blue screen error message, indicating a serious system error. This could be caused by hardware issues, driver conflicts, or software bugs.",
                            Resolved = false,
                            Title = "Blue Screen of Death (BSOD)"
                        },
                        new
                        {
                            Id = new Guid("dbd47ba3-800f-445f-b01a-722094ecc49a"),
                            CreatedAt = new DateTime(2024, 4, 11, 9, 30, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 14, 14, 27, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User is experiencing problems with their web browser, such as slow performance, frequent crashes, or unexpected behavior (e.g., pop-up ads, redirects).",
                            Resolved = false,
                            Title = "Web Browser Issues"
                        },
                        new
                        {
                            Id = new Guid("d71d95ef-e48e-4b0e-a41c-c8ba3c67dc45"),
                            CreatedAt = new DateTime(2024, 4, 7, 20, 23, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 18, 9, 49, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "Computer or network has been compromised by malware, ransomware, or a security breach. Users may notice unusual behavior, unauthorized access, or files being encrypted.",
                            Resolved = false,
                            Title = "Security Breach or Virus Infection"
                        },
                        new
                        {
                            Id = new Guid("7a7c99f8-c087-4a94-99c2-d2a91953ad4e"),
                            CreatedAt = new DateTime(2024, 4, 15, 11, 14, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 26, 0, 42, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "Component of the computer hardware (e.g., hard drive, RAM, graphics card) has failed, resulting in system instability, data loss, or inability to boot up.",
                            Resolved = false,
                            Title = "Hardware Failure"
                        },
                        new
                        {
                            Id = new Guid("9aaf2fbd-e595-466f-90fa-1afe90a62e47"),
                            CreatedAt = new DateTime(2024, 4, 16, 8, 48, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 28, 9, 11, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User requests a password reset for their account due to forgetting their current password or security concerns.",
                            Resolved = false,
                            Title = "Password Reset Request"
                        },
                        new
                        {
                            Id = new Guid("9844f256-d7a6-4f99-9d69-9e55b1e9c32c"),
                            CreatedAt = new DateTime(2024, 4, 14, 2, 13, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 28, 1, 6, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User is experiencing problems with network connectivity, such as intermittent disconnections, slow speeds, or limited access to network resources.",
                            Resolved = false,
                            Title = "Network Connectivity Issues"
                        },
                        new
                        {
                            Id = new Guid("53d21c15-651f-4f48-a608-0846cfcb7773"),
                            CreatedAt = new DateTime(2024, 4, 8, 18, 50, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Deadline = new DateTime(2024, 4, 12, 8, 2, 50, 259, DateTimeKind.Local).AddTicks(3521),
                            Description = "User's application keeps crashing or freezing during use, making it difficult to work efficiently.",
                            Resolved = false,
                            Title = "Application Crashes"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0a1e8296-a7fe-411e-935d-9027f41c91d4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5fa32b7d-e8e1-4c3e-b4c3-28c3c4a5db7e",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "821ebd06-ad83-4a68-80ab-ef644738aaec",
                            Name = "CS",
                            NormalizedName = "CS"
                        },
                        new
                        {
                            Id = "ff532278-82c6-4090-b532-6cbd66fe64ac",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cb5e8084-5d7f-42cf-85df-4b4ff844b034",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9e38b7a-6132-4a62-8b10-231bac800bae",
                            Email = "admin@agiletodo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@AGILETODO.COM",
                            NormalizedUserName = "ADMIN@AGILETODO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFugNRn6kX8i3uWeTqKTL7NM30rr8J9wXeBmLuWbdNcqZM1fAClOAMVWuPwlcjXQPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4350d393-06cd-43cf-8f61-26062b7f9030",
                            TwoFactorEnabled = false,
                            UserName = "admin@agiletodo.com"
                        },
                        new
                        {
                            Id = "8e07ff69-eb9c-4a31-ae54-2ad6b24f276e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc7181db-34e5-43c8-b4c1-731e5ffaaeeb",
                            Email = "manager@agiletodo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@AGILETODO.COM",
                            NormalizedUserName = "MANAGER@AGILETODO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7E8V3w1DaLdGRvHGQfjRyYW7e72kP+vmuIxlGncCRaotUbL8itgJHtluagazJ86w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70937fc3-286a-4148-a31c-8e9e74c33ab6",
                            TwoFactorEnabled = false,
                            UserName = "manager@agiletodo.com"
                        },
                        new
                        {
                            Id = "8452489a-7451-4523-85bb-de8643bb5296",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e29e3600-9846-4220-a842-9e7dae1832c1",
                            Email = "cs@agiletodo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CS@AGILETODO.COM",
                            NormalizedUserName = "CS@AGILETODO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECjnLDnNDPMQ3H72HMtRWVmMG6Ustl5E3XszsAzj+6IPaVcwh7ulWqw4TEOgj14mmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e71f239e-4fcb-472d-9d22-ae47ba7839f2",
                            TwoFactorEnabled = false,
                            UserName = "cs@agiletodo.com"
                        },
                        new
                        {
                            Id = "e3e532ed-1c5d-4e71-b16b-f37782c1d39a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa6987c8-900e-474d-bf21-b9ca6ae61654",
                            Email = "user@agiletodo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@AGILETODO.COM",
                            NormalizedUserName = "USER@AGILETODO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEETAlG22dE88VyYxz7tTkd95CRBwuGgx6pR8WRpKsPKO1MjW/VDxd9BZvKfTT5wFWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96ece27d-b0fe-4213-a32f-7483f109c3e2",
                            TwoFactorEnabled = false,
                            UserName = "user@agiletodo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cb5e8084-5d7f-42cf-85df-4b4ff844b034",
                            RoleId = "0a1e8296-a7fe-411e-935d-9027f41c91d4"
                        },
                        new
                        {
                            UserId = "8e07ff69-eb9c-4a31-ae54-2ad6b24f276e",
                            RoleId = "5fa32b7d-e8e1-4c3e-b4c3-28c3c4a5db7e"
                        },
                        new
                        {
                            UserId = "8452489a-7451-4523-85bb-de8643bb5296",
                            RoleId = "821ebd06-ad83-4a68-80ab-ef644738aaec"
                        },
                        new
                        {
                            UserId = "e3e532ed-1c5d-4e71-b16b-f37782c1d39a",
                            RoleId = "ff532278-82c6-4090-b532-6cbd66fe64ac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
